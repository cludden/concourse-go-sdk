// Code generated by mockery v2.13.1. DO NOT EDIT.

package testutil

import (
	context "context"

	archive "github.com/cludden/concourse-go-sdk/pkg/archive"

	mock "github.com/stretchr/testify/mock"
)

// MockArchivable is an autogenerated mock type for the Archivable type
type MockArchivable struct {
	mock.Mock
}

// Archive provides a mock function with given fields: _a0, _a1
func (_m *MockArchivable) Archive(_a0 context.Context, _a1 *Source) (archive.Archive, error) {
	ret := _m.Called(_a0, _a1)

	var r0 archive.Archive
	if rf, ok := ret.Get(0).(func(context.Context, *Source) archive.Archive); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(archive.Archive)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *Source) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMockArchivable interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockArchivable creates a new instance of MockArchivable. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockArchivable(t mockConstructorTestingTNewMockArchivable) *MockArchivable {
	mock := &MockArchivable{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
